%% introduction to MATLAB notes

% Matthew Tarnowski
% 13th November 2017
% synthetic biology 
% DTC MATLAB module
% day 1 of MATLAB module
% read on for notes and exercises

%% playing around - this is my first matlab file ever!
% Q what is the difference between saving and publishing?
% A seems to be that publishing spits out a box of what the code in
% the file does whereas saving just saves the data in the file

%BODMAS - 
%brackets
%, orders (root/power), 
%division, 
%multiplication,
%addition, 
%subtraction

%function test

%disp("hello")

%end


%% notes from introductory lecture

% %% this is how you add titles (with %%)

% this is how you add notes/comments (with %)

%this is how you add variable names:
%_name_

%add latex equations using:
% $$ y = x $$


% for more info on the publish operation: 
% https://uk.mathworks.com/help/matlab/ref/publish.html


%latex (x^2 + 1/4)


%% working through: an introduction to MATLAB worksheet sections 1-3
%date - 20171114; day 1 of course

% type an equation which doesn't end in a colon to make it output to the
% screen:
x=3+4*(1+6/3)

x

%or type a colon after the equation to ensure it doesn't get published:
x=3+4*(1+6/3)

%then you can print x to screen by simply typing the variable:

x


%% Section 4 - vectors (AKA arrays) and matrices

% example: vector u = (1,4,9) may be entered in to matlab by the following
% methods:
% inputting all the elements simultaneously - this prints the vector
u = [1 4 9]

% mat lab is zero-indexed! :(
%but you can enter the elements of the vector one by one
v(1) = 4;
v(2) = 5;
v(3) = 6;
v

% the transpose of u may be written as u'
u'

%vectors with columns can be written by putting semicolons between the
%vector elements:
v=[4; 5; 6]

% inside the square brackets, the semicolon denotes a new line

% matrices

% *matrices*
A(1,1)=1;
A(1,2)=2;
A(2,1)=3;
A(2,2)=4

%hmm maybe 1-indexing isn't so bad.. 
% A(i,j) corresponds to the element in the ith row and the jth column of
% the matrix A

% you can also type the same size matrix by entering elements in the same
% row with just spaces between them and then entering new lines using ;

B = [3 2; 7 6]

% 
% *4.2 - changing individual elements of a matrix Can be done by specifying*
% *the individual element* :

B(1,2) = 100

%An alternative way is to double click on “A” in the
%Workspace window. This opens a window containing
%the contents of the matrix A.

%  *looking at parts of matrices*
C=[1 2 3 4; 5 6 7 8; 9 10 11 12];

% to view a certain column n type C(:,n) & do similar for a given row
% to view certain rows or columns specify a range m:n

%% Addition, subtraction and multiplication of vectors and matrices

% _the matrices must be of the same size to be a/s/m_
% as advised in the maths module, the number of columns of the first 
% matrix in the multiplication must equal the number of rows in the second
% matrix to be multiplied
% IE matrix A of dimensions 3 x 4 and matrix B dimensions 4 x 23 can be multiplied
% _ (3 x 4) X (4 x 23) -> (3 x 23) product matrix dimensions

%% 6 - generating vectors using ":"

M = 1:10

% A vector y consisting of 100 points equally
%spaced between 5 and 15 may be generated by
%typing:
y=linspace(5,15,100);

%% 7 - some special matrices and vectors

% zeros(m,n) creates a matrix of dimensions m,n
zeros(3,2)

% ones(m,n) does same thing but generates a matrix of ones

% eye(m,n) creates diagonal entries equal to
%1 and all other entries equal to 0 

eye(4,6)

%entries randomly distributed with a uniform
%distribution on the interval [0,1]

rand(4,4)

% use randn for  entries uniformly distributed with mean 0
%and standard deviation 1 

randn(5,5)

% you may omit the latter number if you want a square matrix:

ones (3)

%% complex numbers

%e.g.
z = 3 + 4i

%The real part, imaginary part, magnitude, argument
%and complex conjugate of z may be evaluated using
%the following commands

real(z)
imag(z)
abs(z)
angle(z)
conj(z)

%% 9 flow control

% *for loops example*

for i = 1:3
    i
end

% *while loop example*

i = 1;
while (i <= 3)
    i
    i = i+1;
end

% *useful operators include:*

% == equal to
% ∼= not equal to
% < less than
% > greater than
% <= less than or equal to
% >= greater than or equal to

% *if statement example*
if (x < 0)
    x
end

%% 10 - simple M-files

% instead of typing commands in to the command window, they may be typed in
% to a file with the .m extension
% this allows the build up of commands in to a high level 
% m files can be run from the command window - type "filename"


%% 11 - functions

% functions can be defined e.g.

%function [y] = xsquared(x)
%y = x^2;

% by saving this in to xsquared.m you could run the program from the
% matlab (and not system) command window as xsquared(5) or d = 7  then xsquared(d)

% matlab also allows you to apply things to arrays like so (use x. instead
% of x)
%function [y] = xsquared(x)
%y = x.^2;

%% 12 - the help command

% type help <thing> to get help on a ting
% you can load the graphical help browser by typing doc
%type demo on the command line to get useful demos

%% 14 useful commands

% "whos" gives a list of currently stored variables
% "clear" clears the stored variables
% "clc" clears the command window
% "close all" closes all open figures.

%% 15 simple graphics

fplot('sin(x)',[0 10])
xlabel('x')
ylabel('y')
title('y=sin(x)')

% To plot two data sets y1 and y2 against x on the same
% diagram use the method shown below.